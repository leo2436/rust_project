var searchIndex = JSON.parse('{\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","i":[[14,"cfg_if","cfg_if","The main macro provided by this crate. See crate …",null,null]],"p":[]},\
"getrandom":{"doc":"Interface to the operating system\'s random number …","i":[[3,"Error","getrandom","A small and <code>no_std</code> compatible error type",null,null],[5,"getrandom","","Fill <code>dest</code> with random bytes from the system\'s preferred …",null,[[],[["result",4],["error",3]]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","","",0,[[["nonzerou32",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["error",3]]]],[11,"ne","","",0,[[["error",3]]]],[11,"clone","","",0,[[],["error",3]]],[18,"UNSUPPORTED","","This target/platform is not supported by <code>getrandom</code>.",0,null],[18,"ERRNO_NOT_POSITIVE","","The platform-specific <code>errno</code> returned a non-positive value.",0,null],[18,"IOS_SEC_RANDOM","","Call to iOS <code>SecRandomCopyBytes</code> failed.",0,null],[18,"WINDOWS_RTL_GEN_RANDOM","","Call to Windows <code>RtlGenRandom</code> failed.",0,null],[18,"FAILED_RDRAND","","RDRAND instruction failed due to a hardware issue.",0,null],[18,"NO_RDRAND","","RDRAND instruction unsupported on this target.",0,null],[18,"WEB_CRYPTO","","The browser does not have support for <code>self.crypto</code>.",0,null],[18,"WEB_GET_RANDOM_VALUES","","The browser does not have support for …",0,null],[18,"VXWORKS_RAND_SECURE","","On VxWorks, call to <code>randSecure</code> failed (random number …",0,null],[18,"NODE_CRYPTO","","NodeJS does not have support for the <code>crypto</code> module.",0,null],[18,"NODE_RANDOM_FILL_SYNC","","NodeJS does not have support for <code>crypto.randomFillSync</code>.",0,null],[18,"INTERNAL_START","","Codes below this point represent OS Errors (i.e. positive …",0,null],[18,"CUSTOM_START","","Codes at or above this point can be used by users to …",0,null],[11,"raw_os_error","","Extract the raw OS error code (if this error came from …",0,[[],["option",4]]],[11,"code","","Extract the bare error code.",0,[[],["nonzerou32",3]]]],"p":[[3,"Error"]]},\
"guessing_game":{"doc":"","i":[[5,"main","guessing_game","",null,[[]]]],"p":[]},\
"ppv_lite86":{"doc":"","i":[[0,"x86_64","ppv_lite86","",null,null],[3,"YesS3","ppv_lite86::x86_64","",null,null],[3,"NoS3","","",null,null],[3,"YesS4","","",null,null],[3,"NoS4","","",null,null],[3,"YesA1","","",null,null],[3,"NoA1","","",null,null],[3,"YesA2","","",null,null],[3,"NoA2","","",null,null],[3,"YesNI","","",null,null],[3,"NoNI","","",null,null],[3,"SseMachine","","",null,null],[3,"Avx2Machine","","",null,null],[6,"SSE2","","",null,null],[6,"SSSE3","","",null,null],[6,"SSE41","","",null,null],[6,"AVX","","AVX but not AVX2: only 128-bit integer operations, but …",null,null],[6,"AVX2","","",null,null],[19,"vec128_storage","","Generic wrapper for unparameterized storage of any of the …",null,null],[19,"vec256_storage","","",null,null],[11,"new128","","",0,[[]]],[11,"split128","","",0,[[]]],[19,"vec512_storage","","",null,null],[11,"new128","","",1,[[]]],[11,"split128","","",1,[[]]],[8,"AndNot","ppv_lite86","",null,null],[16,"Output","","",2,null],[10,"andnot","","",2,[[]]],[8,"BSwap","","",null,null],[10,"bswap","","",3,[[]]],[8,"ArithOps","","Ops that depend on word size",null,null],[8,"BitOps0","","Ops that are independent of word size and endian",null,null],[8,"BitOps32","","",null,null],[8,"BitOps64","","",null,null],[8,"BitOps128","","",null,null],[8,"RotateEachWord32","","",null,null],[10,"rotate_each_word_right7","","",4,[[]]],[10,"rotate_each_word_right8","","",4,[[]]],[10,"rotate_each_word_right11","","",4,[[]]],[10,"rotate_each_word_right12","","",4,[[]]],[10,"rotate_each_word_right16","","",4,[[]]],[10,"rotate_each_word_right20","","",4,[[]]],[10,"rotate_each_word_right24","","",4,[[]]],[10,"rotate_each_word_right25","","",4,[[]]],[8,"RotateEachWord64","","",null,null],[10,"rotate_each_word_right32","","",5,[[]]],[8,"RotateEachWord128","","",null,null],[8,"UnsafeFrom","","",null,null],[10,"unsafe_from","","",6,[[]]],[8,"Vec2","","A vector composed of two elements, which may be words or …",null,null],[10,"extract","","",7,[[]]],[10,"insert","","",7,[[]]],[8,"Vec4","","A vector composed of four elements, which may be words or …",null,null],[10,"extract","","",8,[[]]],[10,"insert","","",8,[[]]],[8,"Words4","","A vector composed of four words; depending on their size, …",null,null],[10,"shuffle1230","","",9,[[]]],[10,"shuffle2301","","",9,[[]]],[10,"shuffle3012","","",9,[[]]],[8,"LaneWords4","","A vector composed one or more lanes each composed of four …",null,null],[10,"shuffle_lane_words1230","","",10,[[]]],[10,"shuffle_lane_words2301","","",10,[[]]],[10,"shuffle_lane_words3012","","",10,[[]]],[8,"Swap64","","Exchange neigboring ranges of bits of the specified size",null,null],[10,"swap1","","",11,[[]]],[10,"swap2","","",11,[[]]],[10,"swap4","","",11,[[]]],[10,"swap8","","",11,[[]]],[10,"swap16","","",11,[[]]],[10,"swap32","","",11,[[]]],[10,"swap64","","",11,[[]]],[8,"u32x4","","",null,null],[8,"u64x2","","",null,null],[8,"u128x1","","",null,null],[8,"u32x4x2","","",null,null],[8,"u64x2x2","","",null,null],[8,"u64x4","","",null,null],[8,"u128x2","","",null,null],[8,"u32x4x4","","",null,null],[8,"u64x2x4","","",null,null],[8,"u128x4","","",null,null],[8,"MultiLane","","A vector composed of multiple 128-bit lanes.",null,null],[10,"to_lanes","","Split a multi-lane vector into single-lane vectors.",12,[[]]],[10,"from_lanes","","Build a multi-lane vector from individual lanes.",12,[[]]],[8,"VZip","","Combine single vectors into a multi-lane vector.",null,null],[10,"vzip","","",13,[[]]],[8,"Machine","","",null,null],[16,"u32x4","","",14,null],[16,"u64x2","","",14,null],[16,"u128x1","","",14,null],[16,"u32x4x2","","",14,null],[16,"u64x2x2","","",14,null],[16,"u64x4","","",14,null],[16,"u128x2","","",14,null],[16,"u32x4x4","","",14,null],[16,"u64x2x4","","",14,null],[16,"u128x4","","",14,null],[11,"unpack","","",14,[[],["store",8]]],[11,"vec","","",14,[[]]],[11,"read_le","","",14,[[]]],[11,"read_be","","",14,[[]]],[10,"instance","","SafetyCaller must ensure the type of Self is appropriate …",14,[[]]],[8,"Store","","",null,null],[10,"unpack","","SafetyCaller must ensure the type of Self is appropriate …",15,[[]]],[8,"StoreBytes","","",null,null],[10,"unsafe_read_le","","SafetyCaller must ensure the type of Self is appropriate …",16,[[]]],[10,"unsafe_read_be","","SafetyCaller must ensure the type of Self is appropriate …",16,[[]]],[10,"write_le","","",16,[[]]],[10,"write_be","","",16,[[]]],[14,"dispatch","","Generate the full set of optimized implementations to …",null,null],[14,"dispatch_light128","","Generate only the basic implementations necessary to be …",null,null],[14,"dispatch_light256","","Generate only the basic implementations necessary to be …",null,null],[11,"from","ppv_lite86::x86_64","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"into","","",17,[[]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"instance","","",27,[[]]],[11,"instance","","",28,[[]]],[11,"unpack","","",29,[[["vec128_storage",19]]]],[11,"eq","","",29,[[]]],[11,"eq","","",0,[[]]],[11,"eq","","",1,[[]]],[11,"into","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into","","",1,[[]]],[11,"clone","","",17,[[],["yess3",3]]],[11,"clone","","",18,[[],["nos3",3]]],[11,"clone","","",19,[[],["yess4",3]]],[11,"clone","","",20,[[],["nos4",3]]],[11,"clone","","",21,[[],["yesa1",3]]],[11,"clone","","",22,[[],["noa1",3]]],[11,"clone","","",23,[[],["yesa2",3]]],[11,"clone","","",24,[[],["noa2",3]]],[11,"clone","","",25,[[],["yesni",3]]],[11,"clone","","",26,[[],["noni",3]]],[11,"clone","","",27,[[],["ssemachine",3]]],[11,"clone","","",28,[[],["avx2machine",3]]],[11,"clone","","",29,[[],["vec128_storage",19]]],[11,"clone","","",0,[[],["vec256_storage",19]]],[11,"clone","","",1,[[],["vec512_storage",19]]],[11,"default","","",29,[[]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]],[11,"unpack","ppv_lite86","",14,[[],["store",8]]],[11,"vec","","",14,[[]]],[11,"read_le","","",14,[[]]],[11,"read_be","","",14,[[]]]],"p":[[19,"vec256_storage"],[19,"vec512_storage"],[8,"AndNot"],[8,"BSwap"],[8,"RotateEachWord32"],[8,"RotateEachWord64"],[8,"UnsafeFrom"],[8,"Vec2"],[8,"Vec4"],[8,"Words4"],[8,"LaneWords4"],[8,"Swap64"],[8,"MultiLane"],[8,"VZip"],[8,"Machine"],[8,"Store"],[8,"StoreBytes"],[3,"YesS3"],[3,"NoS3"],[3,"YesS4"],[3,"NoS4"],[3,"YesA1"],[3,"NoA1"],[3,"YesA2"],[3,"NoA2"],[3,"YesNI"],[3,"NoNI"],[3,"SseMachine"],[3,"Avx2Machine"],[19,"vec128_storage"]]},\
"rand":{"doc":"Utilities for random number generation","i":[[8,"CryptoRng","rand","A marker trait used to indicate that an [<code>RngCore</code>] or …",null,null],[3,"Error","","Error type of random number generators",null,null],[8,"RngCore","","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random <code>u32</code>.",0,[[]]],[10,"next_u64","","Return the next random <code>u64</code>.",0,[[]]],[10,"fill_bytes","","Fill <code>dest</code> with random data.",0,[[]]],[10,"try_fill_bytes","","Fill <code>dest</code> entirely with random data.",0,[[],[["result",4],["error",3]]]],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",null,null],[16,"Seed","","Seed type, which is restricted to types …",1,null],[10,"from_seed","","Create a new PRNG using the given seed.",1,[[]]],[11,"seed_from_u64","","Create a new PRNG using a <code>u64</code> seed.",1,[[]]],[11,"from_rng","","Create a new PRNG seeded from another <code>Rng</code>.",1,[[],[["result",4],["error",3]]]],[11,"from_entropy","","Creates a new instance of the RNG seeded via <code>getrandom</code>.",1,[[]]],[0,"distributions","","Generating random samples from probability distributions",null,null],[0,"uniform","rand::distributions","A distribution uniformly sampling numbers within a given …",null,null],[3,"Uniform","rand::distributions::uniform","Sample values uniformly between two bounds.",null,null],[11,"new","","Create a new <code>Uniform</code> instance which samples uniformly …",2,[[],["uniform",3]]],[11,"new_inclusive","","Create a new <code>Uniform</code> instance which samples uniformly …",2,[[],["uniform",3]]],[8,"SampleUniform","","Helper trait for creating objects using the correct …",null,null],[16,"Sampler","","The <code>UniformSampler</code> implementation supporting type <code>X</code>.",3,null],[8,"UniformSampler","","Helper trait handling actual uniform sampling.",null,null],[16,"X","","The type sampled by this implementation.",4,null],[10,"new","","Construct self, with inclusive lower bound and exclusive …",4,[[]]],[10,"new_inclusive","","Construct self, with inclusive bounds <code>[low, high]</code>.",4,[[]]],[10,"sample","","Sample a value.",4,[[]]],[11,"sample_single","","Sample a single value uniformly from a range with …",4,[[]]],[11,"sample_single_inclusive","","Sample a single value uniformly from a range with …",4,[[]]],[8,"SampleBorrow","","Helper trait similar to <code>Borrow</code> but implemented only for …",null,null],[10,"borrow","","Immutably borrows from an owned value. See <code>Borrow::borrow</code>",5,[[]]],[8,"SampleRange","","Range that supports generating a single sample …",null,null],[10,"sample_single","","Generate a sample from the given range.",6,[[]]],[10,"is_empty","","Check whether the range is empty.",6,[[]]],[3,"UniformInt","","The back-end implementing [<code>UniformSampler</code>] for integer …",null,null],[3,"UniformChar","","The back-end implementing [<code>UniformSampler</code>] for <code>char</code>.",null,null],[3,"UniformFloat","","The back-end implementing [<code>UniformSampler</code>] for …",null,null],[3,"UniformDuration","","The back-end implementing [<code>UniformSampler</code>] for <code>Duration</code>.",null,null],[0,"weighted","rand::distributions","Weighted index sampling",null,null],[0,"alias_method","rand::distributions::weighted","",null,null],[3,"WeightedIndex","rand::distributions::weighted::alias_method","",null,null],[11,"new","","",7,[[["vec",3]],[["result",4],["weightederror",4]]]],[8,"Weight","","",null,null],[3,"WeightedIndex","rand::distributions::weighted","A distribution using weighted sampling of discrete items",null,null],[4,"WeightedError","","Error type returned from <code>WeightedIndex::new</code>.",null,null],[13,"NoItem","","The provided weight collection contains no items.",8,null],[13,"InvalidWeight","","A weight is either less than zero, greater than the …",8,null],[13,"AllWeightsZero","","All items in the provided weight collection are zero.",8,null],[13,"TooMany","","Too many weights are provided (length greater than …",8,null],[11,"new","","Creates a new a <code>WeightedIndex</code> [<code>Distribution</code>] using the …",9,[[],[["result",4],["weightedindex",3],["weightederror",4]]]],[11,"update_weights","","Update a subset of weights, without changing the number …",9,[[],[["weightederror",4],["result",4]]]],[3,"Bernoulli","rand::distributions","The Bernoulli distribution.",null,null],[4,"BernoulliError","","Error type returned from <code>Bernoulli::new</code>.",null,null],[13,"InvalidProbability","","<code>p < 0</code> or <code>p > 1</code>.",10,null],[3,"Open01","","A distribution to sample floating point numbers uniformly …",null,null],[3,"OpenClosed01","","A distribution to sample floating point numbers uniformly …",null,null],[3,"Alphanumeric","","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …",null,null],[3,"Uniform","","Sample values uniformly between two bounds.",null,null],[4,"WeightedError","","Error type returned from <code>WeightedIndex::new</code>.",null,null],[13,"NoItem","","The provided weight collection contains no items.",8,null],[13,"InvalidWeight","","A weight is either less than zero, greater than the …",8,null],[13,"AllWeightsZero","","All items in the provided weight collection are zero.",8,null],[13,"TooMany","","Too many weights are provided (length greater than …",8,null],[3,"WeightedIndex","","A distribution using weighted sampling of discrete items",null,null],[8,"Distribution","","Types (distributions) that can be used to create a random …",null,null],[10,"sample","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …",11,[[]]],[11,"sample_iter","","Create an iterator that generates random values of <code>T</code>, …",11,[[],["distiter",3]]],[3,"DistIter","","An iterator that generates random values of <code>T</code> with …",null,null],[3,"Standard","","A generic random value distribution, implemented for many …",null,null],[0,"prelude","rand","Convenience re-export of common members",null,null],[0,"rngs","","Random number generators and adapters",null,null],[3,"OsRng","rand::rngs","A random number generator that retrieves randomness from …",null,null],[0,"adapter","","Wrappers / adapters forming RNGs",null,null],[3,"ReadError","rand::rngs::adapter","<code>ReadRng</code> error type",null,null],[3,"ReadRng","","An RNG that reads random bytes straight from any type …",null,null],[3,"ReseedingRng","","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …",null,null],[0,"mock","rand::rngs","Mock random number generator",null,null],[3,"StepRng","rand::rngs::mock","A simple implementation of <code>RngCore</code> for testing purposes.",null,null],[11,"new","","Create a <code>StepRng</code>, yielding an arithmetic sequence …",12,[[]]],[3,"StdRng","rand::rngs","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …",null,null],[3,"ThreadRng","","A reference to the thread-local generator",null,null],[0,"seq","rand","Sequence-related functionality",null,null],[0,"index","rand::seq","Low-level API for sampling indices",null,null],[4,"IndexVec","rand::seq::index","A vector of indices.",null,null],[11,"len","","Returns the number of indices",13,[[]]],[11,"is_empty","","Returns <code>true</code> if the length is 0.",13,[[]]],[11,"index","","Return the value at the given <code>index</code>.",13,[[]]],[11,"into_vec","","Return result as a <code>Vec<usize></code>. Conversion may or may not …",13,[[],["vec",3]]],[11,"iter","","Iterate over the indices as a sequence of <code>usize</code> values",13,[[],["indexveciter",4]]],[4,"IndexVecIter","","Return type of <code>IndexVec::iter</code>.",null,null],[4,"IndexVecIntoIter","","Return type of <code>IndexVec::into_iter</code>.",null,null],[5,"sample","","Randomly sample exactly <code>amount</code> distinct indices from …",null,[[],["indexvec",4]]],[5,"sample_weighted","","Randomly sample exactly <code>amount</code> distinct indices from …",null,[[],[["indexvec",4],["weightederror",4],["result",4]]]],[8,"SliceRandom","rand::seq","Extension trait on slices, providing random mutation and …",null,null],[16,"Item","","The element type.",14,null],[10,"choose","","Returns a reference to one random element of the slice, …",14,[[],["option",4]]],[10,"choose_mut","","Returns a mutable reference to one random element of the …",14,[[],["option",4]]],[10,"choose_multiple","","Chooses <code>amount</code> elements from the slice at random, without …",14,[[],["slicechooseiter",3]]],[10,"choose_weighted","","Similar to <code>choose</code>, but where the likelihood of each …",14,[[],[["weightederror",4],["result",4]]]],[10,"choose_weighted_mut","","Similar to <code>choose_mut</code>, but where the likelihood of each …",14,[[],[["result",4],["weightederror",4]]]],[10,"choose_multiple_weighted","","Similar to <code>choose_multiple</code>, but where the likelihood of …",14,[[],[["result",4],["slicechooseiter",3],["weightederror",4]]]],[10,"shuffle","","Shuffle a mutable slice in place.",14,[[]]],[10,"partial_shuffle","","Shuffle a slice in place, but exit early.",14,[[]]],[8,"IteratorRandom","","Extension trait on iterators, providing random sampling …",null,null],[11,"choose","","Choose one element at random from the iterator.",15,[[],["option",4]]],[11,"choose_stable","","Choose one element at random from the iterator.",15,[[],["option",4]]],[11,"choose_multiple_fill","","Collects values at random from the iterator into a …",15,[[]]],[11,"choose_multiple","","Collects <code>amount</code> values at random from the iterator into a …",15,[[],["vec",3]]],[3,"SliceChooseIter","","An iterator over multiple slice elements.",null,null],[5,"thread_rng","rand","Retrieve the lazily-initialized thread-local random …",null,[[],["threadrng",3]]],[8,"Fill","","Types which may be filled with random data",null,null],[10,"try_fill","","Fill self with random data",16,[[],[["result",4],["error",3]]]],[8,"Rng","","An automatically-implemented extension trait on [<code>RngCore</code>] …",null,null],[11,"gen","","Return a random value supporting the <code>Standard</code> …",17,[[]]],[11,"gen_range","","Generate a random value in the given range.",17,[[]]],[11,"sample","","Sample a new value, using the given distribution.",17,[[["distribution",8]]]],[11,"sample_iter","","Create an iterator that generates values using the given …",17,[[],["distiter",3]]],[11,"fill","","Fill any type implementing [<code>Fill</code>] with random data",17,[[]]],[11,"try_fill","","Fill any type implementing <code>Fill</code> with random data",17,[[],[["result",4],["error",3]]]],[11,"gen_bool","","Return a bool with a probability <code>p</code> of being true.",17,[[]]],[11,"gen_ratio","","Return a bool with a probability of <code>numerator/denominator</code> …",17,[[]]],[5,"random","","Generates a random value using the thread-local random …",null,[[]]],[11,"from","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"into","","",18,[[]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"to_string","","",18,[[],["string",3]]],[11,"vzip","","",18,[[]]],[11,"from","rand::distributions","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"into","","",19,[[]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"vzip","","",19,[[]]],[11,"from","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"into","","",10,[[]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"vzip","","",2,[[]]],[11,"from","rand::distributions::uniform","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"into","","",20,[[]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"into","","",21,[[]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"into","","",22,[[]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"into","","",23,[[]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"vzip","","",23,[[]]],[11,"from","rand::distributions::weighted::alias_method","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","rand::distributions::weighted","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"into","","",9,[[]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"vzip","","",9,[[]]],[11,"from","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"into","","",8,[[]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"vzip","","",8,[[]]],[11,"from","rand::distributions","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"into","","",24,[[]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"into","","",25,[[]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"into","","",26,[[]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"into","","",27,[[]]],[11,"try_into","","",27,[[],["result",4]]],[11,"into_iter","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"into","","",28,[[]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"vzip","","",28,[[]]],[11,"from","rand::rngs","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"into","","",29,[[]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"vzip","","",29,[[]]],[11,"from","rand::rngs::adapter","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"into","","",30,[[]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"into","","",31,[[]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"to_string","","",31,[[],["string",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"into","","",32,[[]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"vzip","","",32,[[]]],[11,"from","rand::rngs::mock","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"into","","",12,[[]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"vzip","","",12,[[]]],[11,"from","rand::rngs","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"into","","",33,[[]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"into","","",34,[[]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"vzip","","",34,[[]]],[11,"from","rand::seq::index","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"into","","",13,[[]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"vzip","","",13,[[]]],[11,"from","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"into","","",35,[[]]],[11,"try_into","","",35,[[],["result",4]]],[11,"into_iter","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"into","","",36,[[]]],[11,"try_into","","",36,[[],["result",4]]],[11,"into_iter","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"vzip","","",36,[[]]],[11,"from","rand::seq","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"into","","",37,[[]]],[11,"try_into","","",37,[[],["result",4]]],[11,"into_iter","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"source","rand","",18,[[],[["error",8],["option",4]]]],[11,"fmt","","",18,[[["formatter",3]],[["error",3],["result",4]]]],[11,"default","rand::rngs","",29,[[],["osrng",3]]],[11,"clone","","",29,[[],["osrng",3]]],[11,"read","rand","",0,[[],[["result",4],["error",3]]]],[11,"from","","",18,[[["error",3]],["error",3]]],[11,"from","","",18,[[["nonzerou32",3]],["error",3]]],[11,"next_u32","rand::rngs","",29,[[]]],[11,"next_u64","","",29,[[]]],[11,"fill_bytes","","",29,[[]]],[11,"try_fill_bytes","","",29,[[],[["result",4],["error",3]]]],[11,"fmt","","",29,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","rand","",18,[[["formatter",3]],[["error",3],["result",4]]]],[11,"new","rand::distributions::uniform","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",20,[[]]],[11,"new_inclusive","","",20,[[]]],[11,"sample","","",20,[[]]],[11,"sample_single","","",20,[[]]],[11,"sample_single_inclusive","","",20,[[]]],[11,"new","","",21,[[]]],[11,"new_inclusive","","",21,[[]]],[11,"sample","","",21,[[]]],[11,"new","","",22,[[]]],[11,"new_inclusive","","",22,[[]]],[11,"sample","","",22,[[]]],[11,"sample_single","","",22,[[]]],[11,"new","","",22,[[]]],[11,"new_inclusive","","",22,[[]]],[11,"sample","","",22,[[]]],[11,"sample_single","","",22,[[]]],[11,"new","","",23,[[]]],[11,"new_inclusive","","",23,[[]]],[11,"sample","","",23,[[],["duration",3]]],[11,"sample","rand::distributions","",19,[[]]],[11,"sample","","",2,[[]]],[11,"sample","rand::distributions::weighted","",9,[[]]],[11,"sample","rand::distributions","",28,[[]]],[11,"sample","","",24,[[]]],[11,"sample","","",25,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",24,[[]]],[11,"sample","","",25,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[],["nonzerou8",3]]],[11,"sample","","",28,[[],["nonzerou16",3]]],[11,"sample","","",28,[[],["nonzerou32",3]]],[11,"sample","","",28,[[],["nonzerou64",3]]],[11,"sample","","",28,[[],["nonzerou128",3]]],[11,"sample","","",28,[[],["nonzerousize",3]]],[11,"sample","","",28,[[]]],[11,"sample","","",26,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[]]],[11,"sample","","",28,[[],["option",4]]],[11,"sample","","",28,[[],["wrapping",3]]],[11,"from","","",2,[[["range",3]],["uniform",3]]],[11,"from","","",2,[[["rangeinclusive",3]],["uniform",3]]],[11,"from","rand::seq::index","",13,[[["vec",3]]]],[11,"from","","",13,[[["vec",3]]]],[11,"fmt","rand::distributions","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","rand::distributions::uniform","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","rand::distributions::weighted::alias_method","",7,[[["formatter",3]],["result",6]]],[11,"fmt","rand::distributions::weighted","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","rand::distributions","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","rand::rngs::adapter","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","rand::rngs::mock","",12,[[["formatter",3]],["result",6]]],[11,"fmt","rand::rngs","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","rand::seq::index","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","rand::seq","",37,[[["formatter",3]],["result",6]]],[11,"fmt","rand::distributions","",10,[[["formatter",3]],["result",6]]],[11,"fmt","rand::distributions::weighted","",8,[[["formatter",3]],["result",6]]],[11,"fmt","rand::rngs::adapter","",31,[[["formatter",3]],["result",6]]],[11,"eq","rand::distributions","",10,[[["bernoullierror",4]]]],[11,"eq","rand::distributions::weighted","",8,[[["weightederror",4]]]],[11,"eq","rand::rngs::mock","",12,[[["steprng",3]]]],[11,"ne","","",12,[[["steprng",3]]]],[11,"eq","rand::rngs","",33,[[["stdrng",3]]]],[11,"ne","","",33,[[["stdrng",3]]]],[11,"eq","rand::seq::index","",13,[[["indexvec",4]]]],[11,"len","rand::seq","",37,[[]]],[11,"next","rand::distributions","",27,[[],["option",4]]],[11,"size_hint","","",27,[[]]],[11,"next","rand::seq::index","",35,[[],["option",4]]],[11,"size_hint","","",35,[[]]],[11,"next","","",36,[[],["option",4]]],[11,"size_hint","","",36,[[]]],[11,"next","rand::seq","",37,[[],["option",4]]],[11,"size_hint","","",37,[[]]],[11,"into_iter","rand::seq::index","Convert into an iterator over the indices as a sequence …",13,[[],["indexvecintoiter",4]]],[11,"clone","rand::distributions","",19,[[],["bernoulli",3]]],[11,"clone","","",10,[[],["bernoullierror",4]]],[11,"clone","","",2,[[],["uniform",3]]],[11,"clone","rand::distributions::uniform","",20,[[],["uniformint",3]]],[11,"clone","","",21,[[],["uniformchar",3]]],[11,"clone","","",22,[[],["uniformfloat",3]]],[11,"clone","","",23,[[],["uniformduration",3]]],[11,"clone","rand::distributions::weighted","",9,[[],["weightedindex",3]]],[11,"clone","","",8,[[],["weightederror",4]]],[11,"clone","rand::distributions","",24,[[],["openclosed01",3]]],[11,"clone","","",25,[[],["open01",3]]],[11,"clone","","",28,[[],["standard",3]]],[11,"clone","rand::rngs::adapter","",32,[[],["reseedingrng",3]]],[11,"clone","rand::rngs::mock","",12,[[],["steprng",3]]],[11,"clone","rand::rngs","",33,[[],["stdrng",3]]],[11,"clone","","",34,[[],["threadrng",3]]],[11,"clone","rand::seq::index","",13,[[],["indexvec",4]]],[11,"clone","","",36,[[],["indexvecintoiter",4]]],[11,"default","rand::rngs","",34,[[],["threadrng",3]]],[11,"source","rand::rngs::adapter","",31,[[],[["error",8],["option",4]]]],[11,"next_u32","","",30,[[]]],[11,"next_u64","","",30,[[]]],[11,"fill_bytes","","",30,[[]]],[11,"try_fill_bytes","","",30,[[],[["result",4],["error",3]]]],[11,"next_u32","","",32,[[]]],[11,"next_u64","","",32,[[]]],[11,"fill_bytes","","",32,[[]]],[11,"try_fill_bytes","","",32,[[],[["result",4],["error",3]]]],[11,"next_u32","rand::rngs::mock","",12,[[]]],[11,"next_u64","","",12,[[]]],[11,"fill_bytes","","",12,[[]]],[11,"try_fill_bytes","","",12,[[],[["result",4],["error",3]]]],[11,"next_u32","rand::rngs","",33,[[]]],[11,"next_u64","","",33,[[]]],[11,"fill_bytes","","",33,[[]]],[11,"try_fill_bytes","","",33,[[],[["result",4],["error",3]]]],[11,"next_u32","","",34,[[]]],[11,"next_u64","","",34,[[]]],[11,"fill_bytes","","",34,[[]]],[11,"try_fill_bytes","","",34,[[],[["result",4],["error",3]]]],[11,"from_seed","","",33,[[]]],[11,"from_rng","","",33,[[["rngcore",8]],[["error",3],["result",4]]]],[18,"CUSTOM_START","rand","Codes at or above this point can be used by users to …",18,null],[18,"INTERNAL_START","","Codes below this point represent OS Errors (i.e. positive …",18,null],[11,"new","","Construct from any type supporting <code>std::error::Error</code>",18,[[],["error",3]]],[11,"inner","","Reference the inner error (<code>std</code> only)",18,[[],["error",8]]],[11,"take_inner","","Unwrap the inner error (<code>std</code> only)",18,[[],[["box",3],["error",8],["global",3]]]],[11,"raw_os_error","","Extract the raw OS error code (if this error came from …",18,[[],["option",4]]],[11,"code","","Retrieve the error code, if any.",18,[[],[["option",4],["nonzerou32",3]]]],[11,"new","rand::distributions","Construct a new <code>Bernoulli</code> with the given probability of …",19,[[],[["bernoulli",3],["bernoullierror",4],["result",4]]]],[11,"from_ratio","","Construct a new <code>Bernoulli</code> with the probability of success …",19,[[],[["bernoulli",3],["bernoullierror",4],["result",4]]]],[11,"gen","rand","Return a random value supporting the <code>Standard</code> …",17,[[]]],[11,"gen_range","","Generate a random value in the given range.",17,[[]]],[11,"sample","","Sample a new value, using the given distribution.",17,[[["distribution",8]]]],[11,"sample_iter","","Create an iterator that generates values using the given …",17,[[],["distiter",3]]],[11,"fill","","Fill any type implementing [<code>Fill</code>] with random data",17,[[]]],[11,"try_fill","","Fill any type implementing <code>Fill</code> with random data",17,[[],[["result",4],["error",3]]]],[11,"gen_bool","","Return a bool with a probability <code>p</code> of being true.",17,[[]]],[11,"gen_ratio","","Return a bool with a probability of <code>numerator/denominator</code> …",17,[[]]],[11,"new","rand::rngs::adapter","Create a new <code>ReadRng</code> from a <code>Read</code>.",30,[[],["readrng",3]]],[11,"new","","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …",32,[[]]],[11,"reseed","","Reseed the internal PRNG.",32,[[],[["result",4],["error",3]]]]],"p":[[8,"RngCore"],[8,"SeedableRng"],[3,"Uniform"],[8,"SampleUniform"],[8,"UniformSampler"],[8,"SampleBorrow"],[8,"SampleRange"],[3,"WeightedIndex"],[4,"WeightedError"],[3,"WeightedIndex"],[4,"BernoulliError"],[8,"Distribution"],[3,"StepRng"],[4,"IndexVec"],[8,"SliceRandom"],[8,"IteratorRandom"],[8,"Fill"],[8,"Rng"],[3,"Error"],[3,"Bernoulli"],[3,"UniformInt"],[3,"UniformChar"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"OpenClosed01"],[3,"Open01"],[3,"Alphanumeric"],[3,"DistIter"],[3,"Standard"],[3,"OsRng"],[3,"ReadRng"],[3,"ReadError"],[3,"ReseedingRng"],[3,"StdRng"],[3,"ThreadRng"],[4,"IndexVecIter"],[4,"IndexVecIntoIter"],[3,"SliceChooseIter"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","i":[[3,"ChaCha12Core","rand_chacha","ChaCha with 12 rounds",null,null],[3,"ChaCha12Rng","","A cryptographically secure random number generator that …",null,null],[3,"ChaCha20Core","","ChaCha with 20 rounds",null,null],[3,"ChaCha20Rng","","A cryptographically secure random number generator that …",null,null],[3,"ChaCha8Core","","ChaCha with 8 rounds",null,null],[3,"ChaCha8Rng","","A cryptographically secure random number generator that …",null,null],[6,"ChaChaRng","","ChaCha with 20 rounds",null,null],[6,"ChaChaCore","","ChaCha with 20 rounds, low-level interface",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",1,[[["chacha20core",3]]]],[11,"from","","",3,[[["chacha12core",3]]]],[11,"from","","",5,[[["chacha8core",3]]]],[11,"clone","","",0,[[],["chacha20core",3]]],[11,"clone","","",1,[[],["chacha20rng",3]]],[11,"clone","","",2,[[],["chacha12core",3]]],[11,"clone","","",3,[[],["chacha12rng",3]]],[11,"clone","","",4,[[],["chacha8core",3]]],[11,"clone","","",5,[[],["chacha8rng",3]]],[11,"eq","","",0,[[["chacha20core",3]]]],[11,"ne","","",0,[[["chacha20core",3]]]],[11,"eq","","",1,[[["chacha20rng",3]]]],[11,"eq","","",2,[[["chacha12core",3]]]],[11,"ne","","",2,[[["chacha12core",3]]]],[11,"eq","","",3,[[["chacha12rng",3]]]],[11,"eq","","",4,[[["chacha8core",3]]]],[11,"ne","","",4,[[["chacha8core",3]]]],[11,"eq","","",5,[[["chacha8rng",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"generate","","",0,[[]]],[11,"generate","","",2,[[]]],[11,"generate","","",4,[[]]],[11,"next_u32","","",1,[[]]],[11,"next_u64","","",1,[[]]],[11,"fill_bytes","","",1,[[]]],[11,"try_fill_bytes","","",1,[[],[["result",4],["error",3]]]],[11,"next_u32","","",3,[[]]],[11,"next_u64","","",3,[[]]],[11,"fill_bytes","","",3,[[]]],[11,"try_fill_bytes","","",3,[[],[["result",4],["error",3]]]],[11,"next_u32","","",5,[[]]],[11,"next_u64","","",5,[[]]],[11,"fill_bytes","","",5,[[]]],[11,"try_fill_bytes","","",5,[[],[["result",4],["error",3]]]],[11,"from_seed","","",0,[[]]],[11,"from_seed","","",1,[[]]],[11,"from_seed","","",2,[[]]],[11,"from_seed","","",3,[[]]],[11,"from_seed","","",4,[[]]],[11,"from_seed","","",5,[[]]],[11,"get_word_pos","","Get the offset from the start of the stream, in 32-bit …",1,[[]]],[11,"set_word_pos","","Set the offset from the start of the stream, in 32-bit …",1,[[]]],[11,"set_stream","","Set the stream number.",1,[[]]],[11,"get_word_pos","","Get the offset from the start of the stream, in 32-bit …",3,[[]]],[11,"set_word_pos","","Set the offset from the start of the stream, in 32-bit …",3,[[]]],[11,"set_stream","","Set the stream number.",3,[[]]],[11,"get_word_pos","","Get the offset from the start of the stream, in 32-bit …",5,[[]]],[11,"set_word_pos","","Set the offset from the start of the stream, in 32-bit …",5,[[]]],[11,"set_stream","","Set the stream number.",5,[[]]]],"p":[[3,"ChaCha20Core"],[3,"ChaCha20Rng"],[3,"ChaCha12Core"],[3,"ChaCha12Rng"],[3,"ChaCha8Core"],[3,"ChaCha8Rng"]]},\
"rand_core":{"doc":"Random number generation traits","i":[[0,"block","rand_core","The <code>BlockRngCore</code> trait and implementation helpers",null,null],[8,"BlockRngCore","rand_core::block","A trait for RNGs which do not generate random numbers …",null,null],[16,"Item","","Results element type, e.g. <code>u32</code>.",0,null],[16,"Results","","Results type. This is the \'block\' an RNG implementing …",0,null],[10,"generate","","Generate a new block of results.",0,[[]]],[3,"BlockRng","","A wrapper type implementing [<code>RngCore</code>] for some type …",null,null],[12,"core","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …",1,null],[11,"new","","Create a new <code>BlockRng</code> from an existing RNG implementing …",1,[[],["blockrng",3]]],[11,"index","","Get the index into the result buffer.",1,[[]]],[11,"reset","","Reset the number of available results. This will force a …",1,[[]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the …",1,[[]]],[3,"BlockRng64","","A wrapper type implementing [<code>RngCore</code>] for some type …",null,null],[12,"core","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …",2,null],[11,"new","","Create a new <code>BlockRng</code> from an existing RNG implementing …",2,[[],["blockrng64",3]]],[11,"index","","Get the index into the result buffer.",2,[[]]],[11,"reset","","Reset the number of available results. This will force a …",2,[[]]],[11,"generate_and_set","","Generate a new set of results immediately, setting the …",2,[[]]],[0,"impls","rand_core","Helper functions for implementing <code>RngCore</code> functions.",null,null],[5,"next_u64_via_u32","rand_core::impls","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.",null,[[]]],[5,"fill_bytes_via_next","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …",null,[[]]],[5,"fill_via_u32_chunks","","Implement <code>fill_bytes</code> by reading chunks from the output …",null,[[]]],[5,"fill_via_u64_chunks","","Implement <code>fill_bytes</code> by reading chunks from the output …",null,[[]]],[5,"next_u32_via_fill","","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.",null,[[]]],[5,"next_u64_via_fill","","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.",null,[[]]],[0,"le","rand_core","Little-Endian utilities",null,null],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.",null,[[]]],[5,"read_u64_into","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.",null,[[]]],[3,"Error","rand_core","Error type of random number generators",null,null],[3,"OsRng","","A random number generator that retrieves randomness from …",null,null],[8,"RngCore","","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random <code>u32</code>.",3,[[]]],[10,"next_u64","","Return the next random <code>u64</code>.",3,[[]]],[10,"fill_bytes","","Fill <code>dest</code> with random data.",3,[[]]],[10,"try_fill_bytes","","Fill <code>dest</code> entirely with random data.",3,[[],[["result",4],["error",3]]]],[8,"CryptoRng","","A marker trait used to indicate that an [<code>RngCore</code>] or …",null,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",null,null],[16,"Seed","","Seed type, which is restricted to types …",4,null],[10,"from_seed","","Create a new PRNG using the given seed.",4,[[]]],[11,"seed_from_u64","","Create a new PRNG using a <code>u64</code> seed.",4,[[]]],[11,"from_rng","","Create a new PRNG seeded from another <code>Rng</code>.",4,[[["rngcore",8]],[["error",3],["result",4]]]],[11,"from_entropy","","Creates a new instance of the RNG seeded via <code>getrandom</code>.",4,[[]]],[11,"from","rand_core::block","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"from","rand_core","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_string","","",5,[[],["string",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"next_u32","rand_core::block","",1,[[]]],[11,"next_u64","","",1,[[]]],[11,"fill_bytes","","",1,[[]]],[11,"try_fill_bytes","","",1,[[],[["result",4],["error",3]]]],[11,"next_u32","","",2,[[]]],[11,"next_u64","","",2,[[]]],[11,"fill_bytes","","",2,[[]]],[11,"try_fill_bytes","","",2,[[],[["result",4],["error",3]]]],[11,"next_u32","rand_core","",6,[[]]],[11,"next_u64","","",6,[[]]],[11,"fill_bytes","","",6,[[]]],[11,"try_fill_bytes","","",6,[[],[["result",4],["error",3]]]],[11,"from_seed","rand_core::block","",1,[[]]],[11,"seed_from_u64","","",1,[[]]],[11,"from_rng","","",1,[[["rngcore",8]],[["error",3],["result",4]]]],[11,"from_seed","","",2,[[]]],[11,"seed_from_u64","","",2,[[]]],[11,"from_rng","","",2,[[["rngcore",8]],[["error",3],["result",4]]]],[11,"from","rand_core","",5,[[["nonzerou32",3]]]],[11,"from","","",5,[[["error",3]]]],[11,"fmt","rand_core::block","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","rand_core","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"clone","rand_core::block","",1,[[],["blockrng",3]]],[11,"clone","","",2,[[],["blockrng64",3]]],[11,"clone","rand_core","",6,[[],["osrng",3]]],[11,"default","","",6,[[],["osrng",3]]],[11,"source","","",5,[[],[["error",8],["option",4]]]],[11,"read","","",3,[[],[["result",4],["error",3]]]],[18,"CUSTOM_START","","Codes at or above this point can be used by users to …",5,null],[18,"INTERNAL_START","","Codes below this point represent OS Errors (i.e. positive …",5,null],[11,"new","","Construct from any type supporting <code>std::error::Error</code>",5,[[]]],[11,"inner","","Reference the inner error (<code>std</code> only)",5,[[],["error",8]]],[11,"take_inner","","Unwrap the inner error (<code>std</code> only)",5,[[],[["box",3],["error",8]]]],[11,"raw_os_error","","Extract the raw OS error code (if this error came from …",5,[[],["option",4]]],[11,"code","","Retrieve the error code, if any.",5,[[],[["nonzerou32",3],["option",4]]]]],"p":[[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"],[8,"RngCore"],[8,"SeedableRng"],[3,"Error"],[3,"OsRng"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);